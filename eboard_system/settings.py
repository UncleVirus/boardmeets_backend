"""
Django settings for eboard_system project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
#import django_heroku
import os
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
# import ldap
# from django_auth_ldap.config import LDAPSearch,GroupOfNamesType,PosixGroupType
# import django-on-heroku

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent
os.environ['HTTPS'] = "on"
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '6$bes7+p)dhk!r8+k@q5cb2w**e+x8zos3!d(9=55dq$=v+blp'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_filters',
    'voting.apps.VotingConfig',
    'rest_framework.authtoken',
    'demo.apps.DemoConfig',
    'corsheaders',
    'django_crontab',
    'accounts',
    'file_manager',
    'django_rest_passwordreset',
    'licenses',
    'zoom_integration',
    'tasks',
    'signatures',
    'surveys',
    'chat',
    'channels',
    'compliance_management',
    'meeting_management',
    'rest_framework_swagger',
    'contract_manager',
    'notification', 
    #'system-settings'
    # 'django_python3_ldap'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'eboard_system.middleware.filter_ip_middleware.FilterIPMiddleware',
]

CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOWED_ORIGINS = []

ROOT_URLCONF = 'eboard_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries' : {
                'staticfiles': 'django.templatetags.static', 
            }
        },
    },
]

WSGI_APPLICATION = 'eboard_system.wsgi.application'

# Channels
ASGI_APPLICATION = 'eboard_system.asgi.application'


CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts":[os.environ.get('REDIS_URL', 'redis://localhost:6379')]
        },
    },
}


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME'  : 'db.sqlite3',
    }
}

# roles bootsrapped with the system on set up
# run migrations before the system start up
# ADMINS = [('Hillary Collins', 'hillary.collins@coseke.com'),]

SYS_ADMIN_GROUP = "Sys_Admin"
ORG_ADMIN_GROUP = "Org_Admin"
SYSTEM_GROUPS = [
    {
        'name': SYS_ADMIN_GROUP,
    },
    {
        'name': ORG_ADMIN_GROUP,
    }
]

# uncomment after sucessfull migration
RESPONSE_OPTIONS = [
    {
        "display_value": "Yes"
    },
    {
        "display_value": "No"
    },
    {
        "display_value": "Maybe"
    }
]


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework.filters.OrderingFilter',
        'rest_framework.filters.SearchFilter',
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'DEFAULT_MODEL_SERIALIZER_CLASS': (
        'rest_framework.serializers.ModelSerializer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ),
    'DEFAULT_SCHEMA_CLASS':'rest_framework.schemas.coreapi.AutoSchema'

}
SPECTACULAR_SETTINGS = {
    'SCHEMA_PATH_PREFIX':'^/api/$' ,
}

#LDAP CONNECTION
AUTHENTICATION_BACKENDS = [
    # "django_auth_ldap.backend.LDAPBackend",
    "django.contrib.auth.backends.ModelBackend",
]

# LDAP Connection Settings
# The URL of the LDAP server.
AUTH_LDAP_SERVER_URI = "ldap://ldap.jumpcloud.com:389"

# Initiate TLS on connection.
AUTH_LDAP_AUTH_USE_TLS = False

AUTH_LDAP_ALWAYS_UPDATE_USER = True
# The LDAP search base for looking up users.
 
#AUTH_LDAP_USER_SEARCH = LDAPSearch(
   # "o=61516b2c71d27a4968c35c3f,dc=jumpcloud,dc=com", ldap.SCOPE_SUBTREE, "(uid=%(user)s)"
#)           
# The LDAP class that represents a user.

# User model fields mapped to the LDAP
# attributes that represent them.
AUTH_LDAP_USER_ATTR_MAP = {
    "username":"uid",
    "first_name": "givenName",
    "last_name": "sn",
    "email":"mail"
}

AUTH_LDAP_BIND_DN = "uid=johncap,ou=Users,o=61516b2c71d27a4968c35c3f,dc=jumpcloud,dc=com"
AUTH_LDAP_BIND_PASSWORD = 'sudoCrack@321!!'

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {"console": {"class": "logging.StreamHandler"}},
    "loggers": {"django_auth_ldap": {"level": "DEBUG", "handlers": ["console"]}},
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

#cron config
CRONTAB_COMMAND_SUFFIX = '2>&1'
CRONJOBS = [
    ('0 0 * * *', 'tasks.cron.task_expiry_check', '>> cron_jobs.log'),
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

SESSION_COOKIE_SECURE = True

CSRF_COOKIE_SECURE =True

SECURE_SSL_REDIRECT = False

# email configs
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_PORT = os.getenv('EMAIL_PORT')

#sendgrid Api
SENDGRID_API_KEY = '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'
EMAIL_HOST_USER = 'admin@cosekeeboard.com'

# API key and your API secret for zoom jwt
API_KEY = 'wrcKqSnzSsSBqv5DQ6LygQ'
API_SEC = 'TlDrzhjSY38E1STfCqRsMxmOrIo4pj5vaFPS'

#Firebase config api
FIREBASE_API_KEY = 'AAAA03F5dD8:APA91bFHj9owtljdxPJDJVNMZL2ZKjHhf77cXzLhYiRz4qqfcJ_WtaLAjVKJXB9HS4Tyma5oAriMdSQD9qPQmg6_TuEcfrSgY5yHWv6EJa-wLPHN5SYzQUMgVlghUT_msRPVd8IFHDOq'


# REDIRECT_URL
INVITATION_REDIRECT_LINK = 'https://eboard-on-premise.netlify.app/#/dashboard/notifications'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_ROOT = BASE_DIR / 'static'
STATIC_URL = '/static/'
# django_heroku.settings(locals())

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'accounts.User'

USERNAME_FIELD = 'email'

sentry_sdk.init(
    dsn="https://f593ed9c1c43445f8ccac547334fac08@o1072744.ingest.sentry.io/6071974",
    integrations=[DjangoIntegration()],

    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    # We recommend adjusting this value in production.
    traces_sample_rate=1.0,

    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True
)
# django-on-heroku.settings(locals())
TOKEN_EXPIRED_AFTER_SECONDS = 86400
